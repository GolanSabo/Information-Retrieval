package il.ac.shenkar.pdf.utils;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;

import org.apache.pdfbox.debugger.pagepane.PagePane;
import org.apache.pdfbox.debugger.ui.ReaderBottomPanel;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.printing.PDFPageable;

import il.ac.shenkar.Details.FileDetails;



public class PDFReader extends JFrame implements  ActionListener
{
    private File currentDir=new File(".");
    private JMenuBar menuBar;
    private JMenu menu;
    private JMenuItem item1;
    private JMenuItem item2;
    private JMenuItem item3;
    private JMenuItem item4;
    private JPanel documentPanel = new JPanel();
    private ReaderBottomPanel bottomStatusPanel = new ReaderBottomPanel();

    private PDDocument document = null;
    private ArrayList<PDPage> pages= null;
    
    private int currentPage = 0;
    private int numberOfPages = 0;
    private String currentFilename = null;
    private FileDetails details;
    private ArrayList<Integer> locations;
    /**
     * Constructor.
     * @throws Exception 
     */
    public PDFReader(FileDetails _details, ArrayList<Integer> _locations) throws Exception
    {
        initComponents();
        details = _details;
        locations = _locations;
        openPDFFile(details.getPath());
        
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()
    {
    	
        setTitle("PDF Reader");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitApplication();
            }
        });

        menuBar = new JMenuBar();
        menu = new JMenu("Options");
        item1 = new JMenuItem("Details",KeyEvent.VK_D);
        KeyStroke ctrlDKeyStroke = KeyStroke.getKeyStroke("control D");
        item1.setAccelerator(ctrlDKeyStroke);
        item1.addActionListener(this);
        item2 = new JMenuItem("Print",KeyEvent.VK_P);
        KeyStroke ctrlPKeyStroke = KeyStroke.getKeyStroke("control P");
        item2.setAccelerator(ctrlPKeyStroke);
        item2.addActionListener(this);
        item3 = new JMenuItem("Next Page",KeyEvent.VK_N);
        KeyStroke ctrlNKeyStroke = KeyStroke.getKeyStroke('+');
        item3.setAccelerator(ctrlNKeyStroke);
        item3.addActionListener(this);
        item4 = new JMenuItem("Previous Page",KeyEvent.VK_V);
        KeyStroke ctrlBKeyStroke = KeyStroke.getKeyStroke('-');
        item4.setAccelerator(ctrlBKeyStroke);
        item4.addActionListener(this);
        menu.add(item3);
        menu.add(item4);
        menu.add(item1);
        menu.add(item2);
        menuBar.add(menu);
        setJMenuBar(menuBar);
        JScrollPane documentScroller = new JScrollPane();
        documentScroller.setViewportView( documentPanel );


        getContentPane().add( documentScroller, BorderLayout.CENTER );
        getContentPane().add( bottomStatusPanel, BorderLayout.SOUTH );


        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-600)/2, 700, 600);
    }


    private void updateTitle() {
        setTitle( currentFilename + " ("+(currentPage+1)+"/"+numberOfPages+")");
    }
    
    private void nextPage()
    {
        if (currentPage < numberOfPages-1) 
        {
            currentPage++;
            updateTitle();
            showPage(currentPage);
        }
    }
    
    private void previousPage()
    {
        if (currentPage > 0 ) 
        {
            currentPage--;
            updateTitle();
            showPage(currentPage);
        }
    }

   

    private void exitApplication()
    {
        try
        {
            if( document != null )
            {
                document.close();
            }
        }
        catch( IOException io )
        {
            //do nothing because we are closing the application
        }
        this.setVisible( false );
        this.dispose();
    }

    /**
     * @param args the command line arguments
     *
     * @throws Exception If anything goes wrong.
     */
    
    
    private void openPDFFile(String file) throws Exception
    {
        if( document != null )
        {
            document.close();
            documentPanel.removeAll();
        }
        InputStream input = null;
        File f = new File( file );
        input = new FileInputStream(f);
        document = parseDocument( input );
        numberOfPages = document.getNumberOfPages();
        pages = new ArrayList<PDPage>();
        for(int i =0 ;i <numberOfPages; ++i)
        	pages.add(document.getPage(i));
       
        currentFilename = f.getAbsolutePath();
        currentPage = 0;
        updateTitle();
        showPage(0);
    }
    
    private void showPage(int pageNumber)
    {
    	PagePane pane= new PagePane(document,pages.get(pageNumber).getCOSObject(),new JLabel("test"));
    	this.setPreferredSize(new Dimension(1000,700));
    	
    	if (documentPanel.getComponentCount() > 0)
    	{
    		documentPanel.remove(0);
    	}
    	
    	documentPanel.add( pane.getPanel() );
    	documentPanel.setToolTipText("Press ctrl + 'p' to print document"
    			+ " '+' to go to next page"
    			+ " '-' to go back one page");
    	
    	
    	pack();

    	
    }
    /**
     * This will parse a document.
     *
     * @param input The input stream for the document.
     *
     * @return The document.
     *
     * @throws IOException If there is an error parsing the document.
     */
    private static PDDocument parseDocument( InputStream input )throws IOException
    {
        PDDocument document = PDDocument.load( input );
        
        return document;
    }

    /**
     * Get the bottom status panel.
     *
     * @return The bottom status panel.
     */
    public ReaderBottomPanel getBottomStatusPanel()
    {
        return bottomStatusPanel;
    }

	
	private void printDocument()
	{
		PrinterJob job = PrinterJob.getPrinterJob();
		job.setPageable(new PDFPageable(document));
		if (job.printDialog()) {
		    try {
				job.print();
			} catch (PrinterException e) {
				e.printStackTrace();
			}
		}
	}

	
	@Override
	public void actionPerformed(ActionEvent e) 
	{
		if(e.getSource()==item1)
		{
			JOptionPane.showMessageDialog(this,getDetails()
					, "File Details",JOptionPane.INFORMATION_MESSAGE);
		}
		else if(e.getSource()==item2)
		{
			printDocument();
		}
		else if(e.getSource()==item3)
			nextPage();
		else if(e.getSource()==item4)
			previousPage();
		
	}
	
	private String getDetails() 
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Title: " + details.getDocumentName() + "\n" 
				+ "Author: " + details.getAuthor() + "\n"
				+ "Subject: " + details.getSubject() + "\n"
				+ "Description: " + details.getDescription() + "\n"
				+ "Published: " + details.getDate().toString() + "\n");
		return sb.toString();
	}
}