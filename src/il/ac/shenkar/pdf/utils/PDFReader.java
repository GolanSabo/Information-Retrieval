package il.ac.shenkar.pdf.utils;

import java.awt.BorderLayout;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.apache.pdfbox.debugger.ui.ReaderBottomPanel;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.printing.PDFPageable;
import org.apache.pdfbox.debugger.pagepane.PagePane;



public class PDFReader extends JFrame implements KeyListener
{
    private File currentDir=new File(".");
   
    private JPanel documentPanel = new JPanel();
    private ReaderBottomPanel bottomStatusPanel = new ReaderBottomPanel();

    private PDDocument document = null;
    private ArrayList<PDPage> pages= null;
    
    private int currentPage = 0;
    private int numberOfPages = 0;
    private String currentFilename = null;
    /**
     * Constructor.
     * @throws Exception 
     */
    public PDFReader(String filePath) throws Exception
    {
        initComponents();
        openPDFFile(filePath);
        
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()
    {
    	this.addKeyListener(this);
        setTitle("PDF Reader");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitApplication();
            }
        });


        JScrollPane documentScroller = new JScrollPane();
        documentScroller.setViewportView( documentPanel );


        getContentPane().add( documentScroller, BorderLayout.CENTER );
        getContentPane().add( bottomStatusPanel, BorderLayout.SOUTH );

        new JButton("Print");


        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-600)/2, 700, 600);
    }


    private void updateTitle() {
        setTitle( currentFilename + " ("+(currentPage+1)+"/"+numberOfPages+")");
    }
    
    private void nextPage()
    {
        if (currentPage < numberOfPages-1) 
        {
            currentPage++;
            updateTitle();
            showPage(currentPage);
        }
    }
    
    private void previousPage()
    {
        if (currentPage > 0 ) 
        {
            currentPage--;
            updateTitle();
            showPage(currentPage);
        }
    }

   

    private void exitApplication()
    {
        try
        {
            if( document != null )
            {
                document.close();
            }
        }
        catch( IOException io )
        {
            //do nothing because we are closing the application
        }
        this.setVisible( false );
        this.dispose();
    }

    /**
     * @param args the command line arguments
     *
     * @throws Exception If anything goes wrong.
     */
    
    
    private void openPDFFile(String file) throws Exception
    {
        if( document != null )
        {
            document.close();
            documentPanel.removeAll();
        }
        InputStream input = null;
        File f = new File( file );
        input = new FileInputStream(f);
        document = parseDocument( input );
        numberOfPages = document.getNumberOfPages();
        pages = new ArrayList<PDPage>();
        for(int i =0 ;i <numberOfPages; ++i)
        	pages.add(document.getPage(i));
       
        currentFilename = f.getAbsolutePath();
        currentPage = 0;
        updateTitle();
        showPage(0);
    }
    
    private void showPage(int pageNumber)
    {
    	PagePane pane= new PagePane(document,pages.get(pageNumber).getCOSObject(),new JLabel("test"));
    	this.setPreferredSize(new Dimension(1000,700));
    	
    	if (documentPanel.getComponentCount() > 0)
    	{
    		documentPanel.remove(0);
    	}
    	
    	documentPanel.add( pane.getPanel() );
    	
    	pack();

    	
    }
    /**
     * This will parse a document.
     *
     * @param input The input stream for the document.
     *
     * @return The document.
     *
     * @throws IOException If there is an error parsing the document.
     */
    private static PDDocument parseDocument( InputStream input )throws IOException
    {
        PDDocument document = PDDocument.load( input );
        
        return document;
    }

    /**
     * Get the bottom status panel.
     *
     * @return The bottom status panel.
     */
    public ReaderBottomPanel getBottomStatusPanel()
    {
        return bottomStatusPanel;
    }


	@Override
	public void keyPressed(KeyEvent key) {
		if (key.getKeyChar()== '+')
			nextPage();
		else if(key.getKeyChar()== '-')
			previousPage();
		else if ((key.getKeyCode() == KeyEvent.VK_P) && ((key.getModifiers() & KeyEvent.CTRL_MASK) != 0))
		{
			PrinterJob job = PrinterJob.getPrinterJob();
			job.setPageable(new PDFPageable(document));
			if (job.printDialog()) {
			    try {
					job.print();
				} catch (PrinterException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent key) {
		
		
	}

	@Override
	public void keyTyped(KeyEvent key) {
		
		
	}
}